package riscv.singlecycle

import java.nio.ByteBuffer
import java.nio.ByteOrder

import chisel3._
import chiseltest._
import org.scalatest.flatspec.AnyFlatSpec
import riscv.core.CPU
import riscv.core.ProgramCounter
import riscv.Parameters
import riscv.TestAnnotations

class Testbench extends AnyFlatSpec with ChiselScalatestTester {
  def toUInt(x:Int) : UInt = {
    var xext:Long = x.toLong & 0xFFFFFFFFL
    return xext.U(32.W)
  }
  def toUInt(x:String) : UInt = {
    var xh:String = "h" + x
    return xh.U(32.W)
  }
  behavior.of("Single Cycle CPU Testbench")
  it should "execute full testbench" in {
    test(new TestTopModule("tb.asmbin")).withAnnotations(TestAnnotations.annos) { c =>
      for (i <- 1 to 10000) {
        c.clock.step()
        c.io.mem_debug_read_address.poke((i * 4).U) // Avoid timeout
      }
      c.io.mem_debug_read_address.poke(toUInt("4")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfffffff0))
      c.io.mem_debug_read_address.poke(toUInt("8")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfffffff8))
      c.io.mem_debug_read_address.poke(toUInt("c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000008))
      c.io.mem_debug_read_address.poke(toUInt("10")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000001))
      c.io.mem_debug_read_address.poke(toUInt("14")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000001))
      c.io.mem_debug_read_address.poke(toUInt("18")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x78787878))
      c.io.mem_debug_read_address.poke(toUInt("1c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x000091a2))
      c.io.mem_debug_read_address.poke(toUInt("20")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000003))
      c.io.mem_debug_read_address.poke(toUInt("24")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfefcfefd))
      c.io.mem_debug_read_address.poke(toUInt("28")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x10305070))
      c.io.mem_debug_read_address.poke(toUInt("2c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xcccccccc))
      c.io.mem_debug_read_address.poke(toUInt("30")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xffffffcc))
      c.io.mem_debug_read_address.poke(toUInt("34")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xffffcccc))
      c.io.mem_debug_read_address.poke(toUInt("38")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x000000cc))
      c.io.mem_debug_read_address.poke(toUInt("3c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x0000cccc))
      c.io.mem_debug_read_address.poke(toUInt("40")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000d9d))
      c.io.mem_debug_read_address.poke(toUInt("44")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000004))
      c.io.mem_debug_read_address.poke(toUInt("48")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000003))
      c.io.mem_debug_read_address.poke(toUInt("4c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x000001a6))
      c.io.mem_debug_read_address.poke(toUInt("50")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000ec6))
      c.io.mem_debug_read_address.poke(toUInt("54")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x2468b7a8))
      c.io.mem_debug_read_address.poke(toUInt("58")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x5dbf9f00))
      c.io.mem_debug_read_address.poke(toUInt("5c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00012b38))
      c.io.mem_debug_read_address.poke(toUInt("60")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfa2817b7))
      c.io.mem_debug_read_address.poke(toUInt("64")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xff000000))
      c.io.mem_debug_read_address.poke(toUInt("68")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x12345678))
      c.io.mem_debug_read_address.poke(toUInt("6c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x0000f000))
      c.io.mem_debug_read_address.poke(toUInt("70")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000f00))
      c.io.mem_debug_read_address.poke(toUInt("74")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x000000f0))
      c.io.mem_debug_read_address.poke(toUInt("78")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x0000000f))
      c.io.mem_debug_read_address.poke(toUInt("7c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x56780000))
      c.io.mem_debug_read_address.poke(toUInt("80")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x78000000))
      c.io.mem_debug_read_address.poke(toUInt("84")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00005678))
      c.io.mem_debug_read_address.poke(toUInt("88")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000078))
      c.io.mem_debug_read_address.poke(toUInt("7c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x56780000))
      c.io.mem_debug_read_address.poke(toUInt("80")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x78000000))
      c.io.mem_debug_read_address.poke(toUInt("84")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00005678))
      c.io.mem_debug_read_address.poke(toUInt("88")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00000078))
      c.io.mem_debug_read_address.poke(toUInt("8c"))
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x12345678))
      c.io.mem_debug_read_address.poke(toUInt("90")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xce780000))
      c.io.mem_debug_read_address.poke(toUInt("94")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfffff000))
      c.io.mem_debug_read_address.poke(toUInt("98")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfffff000))
      c.io.mem_debug_read_address.poke(toUInt("9c")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfffff000))
      c.io.mem_debug_read_address.poke(toUInt("a0")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfffff000))
      c.io.mem_debug_read_address.poke(toUInt("a4")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfffff000))
      c.io.mem_debug_read_address.poke(toUInt("a8")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfffff000))
      c.io.mem_debug_read_address.poke(toUInt("ac")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x1357cd40))
      c.io.mem_debug_read_address.poke(toUInt("b0")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x13578000))
      c.io.mem_debug_read_address.poke(toUInt("b4")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0xfffff004))
      c.io.mem_debug_read_address.poke(toUInt("b8")) 
      c.clock.step()
      c.io.mem_debug_read_data.expect(toUInt(0x00001a18))
    }
  }
}
